name: Diplom CI/CD for back-end

on:
  push:
    branches:
      - diplom
    paths:
      - "diplom/app/**"

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          cp diplom/.env.example diplom/app/.env
          cp diplom/requirements.txt diplom/app/requirements.txt
          cd diplom/app
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Start PostgreSQL using Docker
        run: |
          docker run --name postgres-db \
            -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -p 5432:5432 \
            -d \
            --health-cmd="pg_isready -U $POSTGRES_USER" \
            --health-interval=5s \
            --health-timeout=5s \
            --health-retries=5 \
            postgres:13.1-alpine
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec postgres-db pg_isready -U "${{ secrets.POSTGRES_USER }}"; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
      - name: Test with pytest
        run: |
          pip install pytest
          pytest .
      - name: Stop PostgreSQL
        run: |
          docker stop postgres-db
          docker rm postgres-db

      - name: Деплой на сервер
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          ssh -o StrictHostKeyChecking=no user@$SERVER_IP "cd /home/ubuntu/diplom/app && git pull && docker-compose up -d"
